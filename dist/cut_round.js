const[,,d,u,b,y]=process.argv;import p from"sharp";p.cache(!1);import{styleText as $}from"node:util";import{existsSync as h}from"fs";import{readFile as x,stat as f,writeFile as w}from"fs/promises";import{copy as I,ensureDir as v,writeJsonSync as k}from"fs-extra/esm";import{BICUBIC2 as B,BILINEAR as _,createICNS as C,createICO as P}from"png2icons";import{fileURLToPath as S}from"node:url";const F=S(import.meta.url);p(d).metadata().then(c=>{const n={...c,err:"",exif:"",icc:"",iptc:"",xmp:""},r=(e=-1)=>{k(F+"on",n,{encoding:"utf8"}),e>-1&&process.exit(e)};r();const t=1024;(c.width<t||c.height<t)&&(n.err=`\u5143\u753B\u50CF\u306E\u30B5\u30A4\u30BA\u306F ${t} x ${t} \u4EE5\u4E0A\u306B\u3057\u3066\u4E0B\u3055\u3044\u3002\uFF08width:${c.width} height:${c.height}\uFF09`,r(10));const o=process.cwd()+"/",a=p(d).png().resize({width:t,height:t,fit:"cover",background:{r:0,g:0,b:0,alpha:0}});switch(parseInt(u)){case 1:a.composite([{input:Buffer.from(`<svg><circle cx="${t/2}" cy="${t/2}" r="${t/2}"/></svg>`),blend:"dest-in"}]);break;case 2:a.composite([{input:Buffer.from(`<svg><rect width="${t}" height="${t}" rx="${t/4.5}" ry="${t/4.5}"/></svg>`),blend:"dest-in"}]);break}a.toFile(o+b).then(async()=>{const e=o+"build/icon.png";if(!h(e))return;const g=(await f(e)).mtimeMs,l=await x(e);await v(o+"build/icon/"),await Promise.allSettled([async()=>{const i=o+"build/icon/icon.icns",m=h(i)?(await f(i)).mtimeMs:0;if(g>m){const s=C(l,_,0);s&&await w(i,s)}},async()=>{const i=o+"build/icon/icon.ico",m=h(i)?(await f(i)).mtimeMs:0;if(g>m){const s=P(l,B,0,!1,!0);s&&await w(i,s)}},()=>I(e,o+y?"doc/icon.png":"doc/app/icon.png")].map(i=>i())).then(()=>{console.log($(["bgGreen","black"],"fn:cut_round.ts ok.")),process.exit(0)})}).catch(e=>{n.err=e.message,r(20)})});
