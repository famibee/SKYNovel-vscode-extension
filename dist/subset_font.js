const[,,d="",...w]=process.argv,m=w.includes("--minify");import{exec as T}from"node:child_process";import{stat as u}from"node:fs/promises";import{outputFile as l,writeJsonSync as $,pathExistsSync as S,copy as P}from"fs-extra/esm";const y=process.platform==="win32";import{userInfo as b}from"node:os";import{extname as F}from"node:path";import x from"node:url";const _=x.fileURLToPath(import.meta.url);let i={};const h=(t=-1)=>{const e=Object.entries(i).sort(([o],[n])=>{const r=o.toUpperCase(),s=n.toUpperCase();return r<s?-1:r>s?1:0});i=Object.fromEntries(e),$(_+"on",i,{encoding:"utf8"}),t>-1&&process.exit(t)},z=m?async(t,e,o)=>{try{const n=_.slice(0,-3)+"_"+e+".txt";await l(n,o,{encoding:"utf8"}),o=o.replaceAll('"','\\"'),await new Promise((r,s)=>T(`pyftsubset "${t.inp}" --text-file="${n}" --layout-features='*' --flavor=woff2 --output-file="${t.out}" --verbose`,async(f,j,p)=>{if(f){const a=`${e} \u51FA\u529B\u30A8\u30E9\u30FC\uFF1A`+f.message.replace(/--text-file=[^\n]+/,"...");console.error(a),t.err+=a+`
`,s();return}await l(n,p,{encoding:"utf8"}),p.includes("Missing glyphs for requested Unicodes:")&&(t.err+=`${e} \u51FA\u529B\u8B66\u544A\uFF1A\u30D5\u30A9\u30F3\u30C8\u30D5\u30A1\u30A4\u30EB\u306B\u542B\u307E\u308C\u306A\u3044\u6587\u5B57\u304C\u3042\u308A\u307E\u3057\u305F\u3002\u30ED\u30B0\u3092\u78BA\u8A8D\uFF08Missing glyphs ...\uFF09\u3057\u3066\u4E0B\u3055\u3044\u3002
`),r()}))}catch(n){n instanceof Error?t.err+=n.message.replace(/--text-file=[^\n]+/,"...")+`
`:t.err+=`err pyftsubset "${t.inp}"`}}:t=>P(t.inp,t.out);import c from"./font.json"with{type:"json"};const{username:g}=b(),A=`${d}/font`,L=y?`C:/Users/${g}/AppData/Local/Microsoft/Windows/Fonts`:`/Users/${g}/Library/Fonts`,U=y?"C:/Windows/Fonts":"/Library/Fonts",O=[];for(const[t,e]of Object.entries(c)){const o=String(e.inp).replace("::PATH_PRJ_FONTS::",A).replace("::PATH_USER_FONTS::",L).replace("::PATH_OS_FONTS::",U),n=`doc/prj/script/${t}${m?".woff2":F(o)}`,r=i[t]={inp:o,out:n,iSize:1,oSize:1,err:""};if(!S(o)){r.err=`\u5909\u63DB\u5931\u6557\u3067\u3059\u3002\u5165\u529B\u30D5\u30A1\u30A4\u30EB ${c[t].inp.slice(20)} \u304C\u5B58\u5728\u3059\u308B\u304B\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044`;continue}O.push(z(r,t,c[t].txt))}Promise.allSettled(O).then(async()=>{for(const[t,e]of Object.entries(i)){const{inp:o,out:n}=e;if(e.inp=c[t].inp,!S(n)){e.err+=`\u5909\u63DB\u5931\u6557\u3067\u3059\u3002\u51FA\u529B\u30D5\u30A1\u30A4\u30EB ${e.out} \u304C\u5B58\u5728\u3057\u307E\u305B\u3093`;continue}e.iSize=(await u(o)).size,e.oSize=(await u(n)).size}h(0)});
