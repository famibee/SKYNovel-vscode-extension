const[,,d,u,y,$]=process.argv;import p from"sharp";p.cache(!1);import{styleText as w}from"node:util";import{existsSync as f}from"node:fs";import{readFile as x,stat as g,writeFile as b}from"node:fs/promises";import{copy as I,ensureDir as v,writeJsonSync as k}from"fs-extra/esm";import{BICUBIC2 as B,BILINEAR as R,createICNS as S,createICO as _}from"png2icons";import{fileURLToPath as C}from"node:url";const P=C(import.meta.url);p(d).metadata().then(async c=>{const r={...c,err:"",exif:"",icc:"",iptc:"",xmp:""},n=(e=-1)=>{k(P+"on",r,{encoding:"utf8"}),e>-1&&process.exit(e)};n();const t=1024;(c.width<t||c.height<t)&&(r.err=`\u5143\u753B\u50CF\u306E\u30B5\u30A4\u30BA\u306F ${t} x ${t} \u4EE5\u4E0A\u306B\u3057\u3066\u4E0B\u3055\u3044\u3002\uFF08width:${c.width} height:${c.height}\uFF09`,n(10));const o=process.cwd()+"/",a=p(d).png().resize({width:t,height:t,fit:"cover",background:{r:0,g:0,b:0,alpha:0}});switch(parseInt(u)){case 1:a.composite([{input:Buffer.from(`<svg><circle cx="${t/2}" cy="${t/2}" r="${t/2}"/></svg>`),blend:"dest-in"}]);break;case 2:a.composite([{input:Buffer.from(`<svg><rect width="${t}" height="${t}" rx="${t/4.5}" ry="${t/4.5}"/></svg>`),blend:"dest-in"}]);break}try{await a.toFile(o+y);const e=o+"build/icon.png";if(!f(e))return;const h=(await g(e)).mtimeMs,l=await x(e);await v(o+"build/icon/"),await Promise.allSettled([async()=>{const i=o+"build/icon/icon.icns",m=f(i)?(await g(i)).mtimeMs:0;if(h>m){const s=S(l,R,0);s&&await b(i,s)}},async()=>{const i=o+"build/icon/icon.ico",m=f(i)?(await g(i)).mtimeMs:0;if(h>m){const s=_(l,B,0,!1,!0);s&&await b(i,s)}},()=>I(e,o+$?"doc/icon.png":"doc/app/icon.png")].map(i=>i())),console.log(w(["bgGreen","black"],"fn:cut_round.ts ok.")),process.exit(0)}catch(e){console.log(w(["bgRed","white"],"  [ERR] %o"),e),r.err=e?.message??String(e),n(20)}});
