const[,,P="",U,m="",c=""]=process.argv,{codec:k}=JSON.parse(U);import B from"@ffmpeg-installer/ffmpeg";import E from"fluent-ffmpeg";E.setFfmpegPath(B.path);import{resolve as i,parse as b,basename as F}from"node:path";import{styleText as $}from"node:util";import{existsSync as l,statSync as g,readdirSync as C}from"node:fs";import{mkdirs as p,move as x,readJsonSync as I,remove as G,writeJsonSync as R}from"fs-extra/esm";import{fileURLToPath as J}from"node:url";const M=J(import.meta.url),q=/^.+\/(_notes|Icon\r|\.[^\/]+|[^\/]+\.(db|ini|git))$/;async function u(e,t,a){for(const s of C(e,{withFileTypes:!0})){const o=String(s.name).normalize("NFC");if(q.test(o))continue;if(s.isDirectory()){await a(o);continue}const r=i(e,o);t(r,o)}}function Q(e,t,a=!0){if(l(e)||console.error(`chkUpdate err path1=${e}=`),!l(t))return a;const s=g(e,{bigint:!0}),o=g(t,{bigint:!0});return s.mtimeMs>o.mtimeMs}const z=/\.(mp3|wav)$/,T=M+"on";let n={sum:{baseSize:0,optSize:0,pathSndOpt:"",pathSndBase:""},hSize:{}};const y=()=>{if(!l(T))return;const e={...n};n=I(T,{encoding:"utf8"}),e.sum={...n.sum};for(const t in n.hSize){const{fld_nm:a,ext:s,baseSize:o,optSize:r}=n.hSize[t],S=a+"."+s;l(i(m,S))||l(i(c,S))?e.hSize[t]=n.hSize[t]:(e.sum.baseSize-=o,e.sum.optSize-=r)}n=e},W=(e=-1)=>{const t=Object.entries(n.hSize).sort(([a],[s])=>{const o=a.toUpperCase(),r=s.toUpperCase();return o<r?-1:o>r?1:0});n.hSize=Object.fromEntries(t),R(T,n,{encoding:"utf8"}),e>-1&&process.exit(e)};import X from"p-queue";const f=new X({concurrency:20,autoStart:!1});let O=0;const Y=async()=>{O=f.size,console.log($(["bgGreen","black"],`fn:cnv_mat_snd.ts start: ${O} tasks`)),await f.start().onIdle(),W(0)};let _=()=>{const e=f.size;if(!(e%20>0)){if(e===0){_=()=>{};return}console.log($(["bgGreen","black"],`fn:cnv_mat_snd.ts ${e}/${O} tasks`))}};const A="."+k,L="."+(k==="opus"?"m4a":k);async function w(e,t,a=!0){const{dir:s,name:o}=b(e);a?await x(e,t,{overwrite:!0}):await Promise.allSettled(["m4a","aac","ogg"].map(h=>G(s+"/"+o+"."+h)));const{dir:r,ext:S}=b(t),d=r+"/"+o+A,v=n.hSize[o]??={fld_nm:F(s)+"/"+o,baseSize:0,optSize:0,ext:""};await new Promise(h=>E(t).save(d).on("error",j=>console.error(j)).on("end",async(j,H)=>{const N=g(t).size,D=g(d).size;n.hSize[o]={...v,baseSize:N,optSize:D,ext:S.slice(1)},n.sum.baseSize+=N,n.sum.optSize+=D,await x(d,s+"/"+o+L,{overwrite:!0}),_(),h()}))}(async()=>{switch(P){case"enable":await p(c),await u(m,()=>{},async e=>{const t=i(c,e);await p(t),await u(i(m,e),(a,s)=>{if(z.test(s)){f.add(()=>w(a,i(t,s)));return}},async()=>{})});break;case"disable":await u(c,()=>{},async e=>{await u(i(c,e),(t,a)=>{if(!z.test(a))return;const s=i(m,e,a);f.add(async()=>{await x(t,s,{overwrite:!0}),_()});const o=s.slice(0,-3);for(const r of["m4a","aac","ogg"])f.add(async()=>{await G(o+r),_()})},async()=>{})});break;case"reconv":y(),n.sum.baseSize=n.sum.optSize=0;for(const{ext:e,fld_nm:t}of Object.values(n.hSize))f.add(()=>w(i(m,t+"."+e),i(c,t+"."+e),!1));break;case"prj_scan":y(),await p(c),await u(m,()=>{},async e=>{const t=i(c,e);await p(t),await u(i(m,e),(a,s)=>{if(z.test(s)){f.add(()=>w(a,i(t,s)));return}},async()=>{})});break;case"base_scan":y(),await u(c,()=>{},async e=>{const t=i(c,e);await p(t);const a=i(m,e);await u(t,(s,o)=>{if(!z.test(s))return;const r=i(a,o.replace(z,L));if(!Q(s,r))return;const{name:S}=b(r);if(S in n.hSize){const{baseSize:d=0,optSize:v=0}=n.hSize[S];n.sum.baseSize-=d,n.sum.optSize-=v}f.add(()=>w(r,s,!1))},async()=>{})});break;default:{y();const{dir:e,name:t,ext:a}=b(P),s={...n.hSize[t],fld_nm:F(e)+"/"+t,ext:a.slice(1)};n.sum.baseSize-=s.baseSize,n.sum.optSize-=s.optSize,await w(P,m,!!c)}break}await Y()})();export{Q as chkUpdate};
