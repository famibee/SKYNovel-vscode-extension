var t=require("fs-extra"),l=require("os"),_=require("path");const[,,...g]=process.argv,u=g.includes("--minify"),w=require("subset-font"),p=process.platform==="win32",c={},O=(n=-1)=>{(0,t.writeJsonSync)(__filename+"on",c,{encoding:"utf8"}),n>-1&&process.exit(n)},T=u?async(n,o)=>{try{const e=await(0,t.readFile)(n.inp),s=["woff2","woff","sfnt"],F=s.length;for(let i=0;i<F;++i)try{const a=await w(e,o,{targetFormat:s[i]});n.out+=["woff2","woff","ttf"][i],await(0,t.outputFile)(n.out,a);break}catch(a){const f=`\u3010${s[i]} \u751F\u6210\u5931\u6557\u3011`;console.error(f+a.message),n.err+=f+`
`;continue}}catch(e){n.err+=e.message+`
`}}:n=>(0,t.ensureLink)(n.inp,n.out),r=require("./font.json"),m=[],{username:S}=(0,l.userInfo)(),y="core/font",P=p?`C:/Users/${S}/AppData/Local/Microsoft/Windows/Fonts`:`/Users/${S}/Library/Fonts`,b=p?"C:/Windows/Fonts":"/Library/Fonts";for(const n in r){const o=String(r[n].inp).replace("::PATH_PRJ_FONTS::",y).replace("::PATH_USER_FONTS::",P).replace("::PATH_OS_FONTS::",b),e=`doc/prj/script/${n}${u?".":(0,_.extname)(o)}`,s=c[n]={inp:o,out:e,iSize:1,oSize:1,err:""};if(!(0,t.existsSync)(o)){s.err=`\u5909\u63DB\u5931\u6557\u3067\u3059\u3002\u5165\u529B\u30D5\u30A1\u30A4\u30EB ${r[n].inp.slice(20)} \u304C\u5B58\u5728\u3059\u308B\u304B\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044`;continue}m.push(T(s,r[n].txt))}Promise.allSettled(m).then(()=>{for(const n in c){const o=c[n],{inp:e,out:s}=o;if(o.inp=r[n].inp,!(0,t.existsSync)(s)){o.err+=`\u5909\u63DB\u5931\u6557\u3067\u3059\u3002\u51FA\u529B\u30D5\u30A1\u30A4\u30EB ${o.out} \u304C\u5B58\u5728\u3057\u307E\u305B\u3093`;continue}o.iSize=(0,t.statSync)(e).size,o.oSize=(0,t.statSync)(s).size}O(0)});
